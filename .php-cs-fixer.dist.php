<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */
if (!file_exists(__DIR__.'/src')) {
    exit(0);
}

$finder = PhpCsFixer\Finder::create()
    ->in(__DIR__.'/src')
    ->append([__FILE__])
    ->notPath('#/Fixtures/#')
    ->exclude([
        // directories containing files with content that is autogenerated by `var_export`, which breaks CS in output code
        // fixture templates
        'Symfony/Bundle/FrameworkBundle/Tests/Templating/Helper/Resources/Custom',
        // resource templates
        'Symfony/Bundle/FrameworkBundle/Resources/views/Form',
        // explicit trigger_error tests
        'Symfony/Bridge/PhpUnit/Tests/DeprecationErrorHandler/',
    ])
    // Support for older PHPUnit version
    ->notPath('Symfony/Bridge/PhpUnit/SymfonyTestsListener.php')
    ->notPath('#Symfony/Bridge/PhpUnit/.*Mock\.php#')
    ->notPath('#Symfony/Bridge/PhpUnit/.*Legacy#')
    // file content autogenerated by `var_export`
    ->notPath('Symfony/Component/Translation/Tests/fixtures/resources.php')
    // file content autogenerated by `VarExporter::export`
    ->notPath('Symfony/Component/Serializer/Tests/Fixtures/serializer.class.metadata.php')
    // test template
    ->notPath('Symfony/Bundle/FrameworkBundle/Tests/Templating/Helper/Resources/Custom/_name_entry_label.html.php')
    // explicit trigger_error tests
    ->notPath('Symfony/Component/ErrorHandler/Tests/DebugClassLoaderTest.php')
;

$config = new PhpCsFixer\Config();
$config
    ->setRiskyAllowed(true)
    ->setRules([
        '@Symfony' => true,
        '@PhpCsFixer' => true,
        '@PHP80Migration' => true,
        '@Symfony:risky' => true,
        '@DoctrineAnnotation' => true,
        '@PHPUnit75Migration:risky' => true,
        'array_syntax' => ['syntax' => 'short'],
        'fopen_flags' => false,
        'protected_to_private' => false,
        'native_constant_invocation' => true,
        'combine_nested_dirname' => true,
        'list_syntax' => ['syntax' => 'short'],
        'ternary_to_null_coalescing' => true,
        'phpdoc_add_missing_param_annotation' => ['only_untyped' => false],
        'no_superfluous_phpdoc_tags' => false,
        'php_unit_method_casing' => ['case' => 'snake_case'],
    ])
    ->setFinder($finder)
;

// special handling of fabbot.io service if it's using too old PHP CS Fixer version
if (false !== getenv('FABBOT_IO')) {
    try {
        PhpCsFixer\FixerFactory::create()
            ->registerBuiltInFixers()
            ->registerCustomFixers($config->getCustomFixers())
            ->useRuleSet(new PhpCsFixer\RuleSet($config->getRules()))
        ;
    } catch (UnexpectedValueException|InvalidArgumentException $e) {
        $config->setRules([]);
    }
}

return $config;
